--- b/sources/shiboken2/tests/dumpcodemodel/main.cpp
+++ a/sources/shiboken2/tests/dumpcodemodel/main.cpp
@@ -88,3 +88,27 @@
     for (const auto &en : nsp->enums())
         formatXmlEnum(writer, en);
+
+    for (auto func : nsp->functions()){
+       const QString signature = func->typeSystemSignature();
+       const QString rettype = func->type().toString(); //wtf
+       const QString isConst = func->isConstant() ? QStringLiteral("true") : QStringLiteral("false");
+       QString ttype;
+       switch(func->functionType()) {
+         case CodeModel::FunctionType::Constructor: ttype = QStringLiteral("Constructor"); break;
+         case CodeModel::FunctionType::CopyConstructor: ttype = QStringLiteral("CopyConstructor"); break;
+         case CodeModel::FunctionType::Destructor: ttype = QStringLiteral("Destructor"); break;
+         case CodeModel::FunctionType::MoveConstructor: ttype = QStringLiteral("MoveConstructor"); break;
+         case CodeModel::FunctionType::Normal: ttype = QStringLiteral("Normal"); break;
+         case CodeModel::FunctionType::Signal: ttype = QStringLiteral("Signal"); break;
+         case CodeModel::FunctionType::Slot: ttype = QStringLiteral("Slot"); break;
+         };
+               if (!signature.contains(QLatin1String("operator"))) { // Skip free operators
+                   writer.writeStartElement(QStringLiteral("function"));
+                   writer.writeAttribute(QStringLiteral("signature"), signature);
+                   writer.writeAttribute(QStringLiteral("return"), rettype);
+                   writer.writeAttribute(QStringLiteral("isConst"), isConst);
+                   writer.writeAttribute(QStringLiteral("ttype"), ttype);
+                   writer.writeEndElement();
+               }
+    }
 }
